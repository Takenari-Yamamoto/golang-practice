// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/money.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MoneyService_GetMoney_FullMethodName  = "/money.MoneyService/GetMoney"
	MoneyService_SendMoney_FullMethodName = "/money.MoneyService/SendMoney"
)

// MoneyServiceClient is the client API for MoneyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyServiceClient interface {
	GetMoney(ctx context.Context, in *MoneyRequest, opts ...grpc.CallOption) (*MoneyResponse, error)
	SendMoney(ctx context.Context, in *MoneyRequest, opts ...grpc.CallOption) (*MoneyResponse, error)
}

type moneyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyServiceClient(cc grpc.ClientConnInterface) MoneyServiceClient {
	return &moneyServiceClient{cc}
}

func (c *moneyServiceClient) GetMoney(ctx context.Context, in *MoneyRequest, opts ...grpc.CallOption) (*MoneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoneyResponse)
	err := c.cc.Invoke(ctx, MoneyService_GetMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyServiceClient) SendMoney(ctx context.Context, in *MoneyRequest, opts ...grpc.CallOption) (*MoneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoneyResponse)
	err := c.cc.Invoke(ctx, MoneyService_SendMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneyServiceServer is the server API for MoneyService service.
// All implementations must embed UnimplementedMoneyServiceServer
// for forward compatibility
type MoneyServiceServer interface {
	GetMoney(context.Context, *MoneyRequest) (*MoneyResponse, error)
	SendMoney(context.Context, *MoneyRequest) (*MoneyResponse, error)
	mustEmbedUnimplementedMoneyServiceServer()
}

// UnimplementedMoneyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoneyServiceServer struct {
}

func (UnimplementedMoneyServiceServer) GetMoney(context.Context, *MoneyRequest) (*MoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoney not implemented")
}
func (UnimplementedMoneyServiceServer) SendMoney(context.Context, *MoneyRequest) (*MoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMoney not implemented")
}
func (UnimplementedMoneyServiceServer) mustEmbedUnimplementedMoneyServiceServer() {}

// UnsafeMoneyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyServiceServer will
// result in compilation errors.
type UnsafeMoneyServiceServer interface {
	mustEmbedUnimplementedMoneyServiceServer()
}

func RegisterMoneyServiceServer(s grpc.ServiceRegistrar, srv MoneyServiceServer) {
	s.RegisterService(&MoneyService_ServiceDesc, srv)
}

func _MoneyService_GetMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServiceServer).GetMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyService_GetMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServiceServer).GetMoney(ctx, req.(*MoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyService_SendMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServiceServer).SendMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyService_SendMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServiceServer).SendMoney(ctx, req.(*MoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoneyService_ServiceDesc is the grpc.ServiceDesc for MoneyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "money.MoneyService",
	HandlerType: (*MoneyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMoney",
			Handler:    _MoneyService_GetMoney_Handler,
		},
		{
			MethodName: "SendMoney",
			Handler:    _MoneyService_SendMoney_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/money.proto",
}
