---
description: 
globs: 
alwaysApply: true
---
# ラーメン通販サイト開発ルール

## コーディング規約

### 命名規則
- **パッケージ名**: 小文字、単数形を使用する（例: `handler`, `repository`）
- **ファイル名**: スネークケースまたは単語区切りのない小文字（例: `user_handler.go`）
- **変数名**: キャメルケース、意味が明確な名前を使用（例: `userID`, `orderTotal`）
- **関数名**: キャメルケース、動詞+名詞の形式を推奨（例: `GetUserByID`, `CreateOrder`）
- **構造体名**: パスカルケース、単数形、ドメインを表す名前（例: `User`, `OrderItem`）
- **インターフェース名**: パスカルケース、「～er」「～Repository」「～Service」の形式（例: `UserRepository`, `PaymentService`）
- **定数**: 大文字のスネークケース（例: `MAX_RETRY_COUNT`）

### コードフォーマット
- `go fmt` / `goimports` を使用して自動整形を行う
- PRを出す前に必ずフォーマットを適用する
- エディタの設定で保存時に自動フォーマットを適用することを推奨

### コーディングルール
- 関数は短く保ち、20〜30行以内を目標にする
- 変数のスコープはできるだけ小さく保つ
- グローバル変数は避ける
- エラー処理は `if err != nil` による早期リターン（ガード節）を使用する
- 内側のレイヤーが外側のレイヤーに依存しないよう注意する
- どのような場合も、パニックではなくエラーを返す
- 複雑なロジックには単体テストを書く
- コメントは英語ではなく日本語で記述する

### ドキュメント
- 公開する型や関数には GoDoc 形式でコメントを付与する
```go
// UserRepository はユーザー情報を扱うためのリポジトリインターフェースです。
type UserRepository interface {
    // GetUserByID は指定された ID のユーザーを取得します。
    GetUserByID(ctx context.Context, id int) (*User, error)
}
```

## クリーンアーキテクチャルール

### レイヤー構造
```
[ Handler / Controller ]   -> 外側
        ↓
    [ UseCase ]
        ↓
  [ Domain / Entity ]
        ↓
 [ Infrastructure ]     -> 内側 (DB や外部サービス等)
```

### 依存関係の原則
- 外側のレイヤーが内側のレイヤーに依存する（内側は外側を知らない）
- ドメイン層は最も独立しており、他のどの層にも依存しない
- 依存性逆転の原則を適用し、インターフェースを使って疎結合を保つ

### 各レイヤーの責務
- **Domain/Entity層**: ビジネスルールとエンティティ定義
  - ドメインモデルのデータ構造と振る舞いを定義
  - ビジネスのコアロジックを含む
  - 他の層に依存しない

- **UseCase層**: アプリケーションのビジネスロジック
  - ユースケース（機能）単位で実装
  - ドメイン層のエンティティを操作
  - リポジトリインターフェースを利用

- **Interface層（Handler/Controller）**: 外部とのインターフェース
  - HTTPリクエスト/レスポンスの処理
  - 入力バリデーション
  - ユースケース層へのデータ受け渡し
  - レスポンスの整形

- **Infrastructure層**: 技術的な実装詳細
  - データベースアクセス
  - 外部APIとの連携
  - キャッシュ、ロギングなどの技術的機能

## ディレクトリ構造
```
.
├── cmd
│   └── main.go           // エントリーポイント
├── internal
│   ├── domain
│   │   ├── model         // Entity (構造体や定数)
│   │   └── repository    // Repository インターフェース
│   ├── usecase
│   │   ├── interactor.go // UseCase (ビジネスロジック)
│   │   └── port.go       // UseCase で利用するインターフェース定義など
│   ├── interface
│   │   ├── handler       // Handler (Controller)
│   │   └── middleware    // 認証・ロギングなど共通処理
│   └── infrastructure
│       ├── db            // DB 接続、ORM 設定など
│       └── repository    // Repository の具象実装
├── pkg                    // 汎用的なユーティリティ
├── config
│   └── config.yaml       // 環境設定ファイル
└── go.mod
```

## テスト規約

### テスト方針
- 単体テストは必須、統合テストは重要な機能に対して実施
- テストカバレッジは70%以上を目標とする
- テストしやすい設計を心がける（依存性の注入など）

### テスト構造
- テストファイルは対象のパッケージ直下に `_test.go` として配置
- テスト関数は `Test` で始める（例: `TestCreateUser`）
- テーブル駆動テストを活用する
- モックは適切に使用（例: リポジトリのモック）

### テストコード例
```go
func TestCreateUser(t *testing.T) {
    // Arrange
    repo := mockUserRepository{}
    uc := NewUserUsecase(repo)

    // Act
    user, err := uc.CreateUser(context.Background(), &User{Name: "Test"})

    // Assert
    assert.NoError(t, err)
    assert.Equal(t, "Test", user.Name)
}
```

## エラーハンドリング

### エラー処理方針
- パニックではなくエラーを返す
- エラーはラップして情報を付加する（`fmt.Errorf("failed to get user: %w", err)`）
- エラー種別を定義し、適切に分類する
- 利用者に見せるエラーメッセージと内部ログのエラーメッセージを区別する

### ロギング方針
- ロギングレベルを適切に使い分ける（DEBUG, INFO, WARN, ERROR, FATAL）
- トレースIDをログに含め、関連するログを追跡可能にする
- 個人情報や機密情報はログに出力しない
- エラーログには原因と対応策がわかるよう十分な情報を含める

## データベース規約

### 命名規則
- テーブル名: スネークケース、複数形（例: `users`, `order_items`）
- カラム名: スネークケース（例: `first_name`, `created_at`）
- 主キー: `id` を基本とする
- 外部キー: `{テーブル名の単数形}_id`（例: `user_id`, `order_id`）

### 設計規則
- 適切なインデックスを設定する
- 必要に応じて論理削除（ソフトデリート）を使用する
- タイムスタンプ（`created_at`, `updated_at`）を持たせる
- データ整合性を保つため、適切な制約を設定する

## セキュリティ規約

### 認証・認可
- JWTを使用した認証を実装する
- パスワードは必ずハッシュ化して保存する（bcryptなど）
- 権限チェックは適切なミドルウェアで実装する
- セッションタイムアウトを適切に設定する

### データ保護
- 機密情報は暗号化して保存する
- 環境変数やシークレットマネージャーを使用して機密情報を管理する
- SQLインジェクションやXSSなどの脆弱性に対応する
- 入力値の検証とサニタイズを徹底する

## 設定管理

### 環境変数
- DB接続情報など秘匿情報は環境変数で管理する
- `.env`ファイルは`.gitignore`に追加し、`.env.example`をサンプルとして提供する

### 設定ファイル
- `config/config.yaml`をベースに環境ごとに設定ファイルを用意する
- Viperなどのライブラリを使用して設定を読み込む